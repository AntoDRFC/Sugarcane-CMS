<?php/** * BlogAdmin Controller * * @author Anto Heley <anto@antodev.com> * @version */class BlogAdminController extends Sugarcane_Controllers_Base {        public function preDispatch() {        $this->view->page    = 'blogadmin';        $this->view->navType = $this->config->settings->nav;                $loggedIn = isset($_SESSION['loggedin']) ? true : false;                if(!$loggedIn) {            //header('Location: /admin/login.php');        }    }        public function indexAction() {        $options['order'] = 'ASC';        $posts = $this->dbMapper->getBlogPosts($options);                $this->view->posts = $posts;        $this->view->js[] = '/js/blogadmin.js';                $this->view->css[]       = '/css/pagebuilder.css';        $this->view->contentView = '/blogadmin/index.phtml';                $this->renderView('admin.phtml');    }        public function editpostAction() {        $post_id = $this->req->getParam('post', null);        $this->view->post_id = $post_id;                if($post_id) {            $post = $this->dbMapper->getBlogPost($post_id);            $this->view->post = $post;        }                $this->view->css[] = '/css/pagebuilder.css';                $this->view->js[] = '/js/ckeditor/ckeditor.js';        $this->view->js[] = '/js/AjexFileManager/ajex.js';        $this->view->js[] = '/js/pagebuilder.js';        $this->view->js[] = '/js/blogadmin.js';        $this->view->contentView = '/blogadmin/create.phtml';        $this->renderView('admin.phtml');    }            public function savepostAction() {        $save_post['post_id']            = (int) $this->req->getParam('post_id');        $save_post['blog_id']            = (int) $this->req->getParam('blog_id');        $save_post['post_title']         = htmlentities($this->req->getPost('post_title'));        $save_post['post_imagelocation'] = $this->req->getPost('post_imagelocation');        $save_post['post_summary']       = htmlentities($this->req->getPost('post_summary'));        $save_post['post_content']       = $this->req->getParam('post_content');                $upload = new Zend_File_Transfer();        $dest_dir = $this->config->paths->base . '/images/blogimages/';        if(!file_exists($dest_dir)){            if(!mkdir($dest_dir)){                throw new Exception("Could not create data directory");            }        }        $upload->setDestination($dest_dir);                $allowed_extensions = '123,3g2,3gp,aac,aam,ac3,accdb,ai,aiff,ani,art,asf,ASM,asx,au,avi,blz,bmp,cdr,cmx,csv,cur,dcr,def,DIB,doc,docx,dot,dotx,dox,DRW,dsf,dwf,dwg,dwt,dxf,dxr,ea,emf,eml,eot,eps,ev,ev2,evy,FAX,fla,flac,flp,flv,FPX,FRM,FXR,ged,gif,gvi,HGL,hjt,hlp,HP,HPG,HPGL,hwp,IAM,ico,IDV,IDW,img,inc,IPT,isf,it,ivr,ivs,jfif,jif,jpe,jpeg,jpg,key,lbi,log,lwp,m4a,m4v,map,mbx,mdb,mdi,mid,midi,mod,mov,mp2,mp3,mp4,mpa,mpeg,mpg,mpp,msg,MSWMM,MWP,nsf,numbers,OBD,odf,odg,odp,ods,odt,ogg,opf,otg,otp,ots,ott,pages,PBM,pcd,pcl,pcx,pdf,pfr,PLT,ply,png,PNTG,pot,ppm,pps,ppt,pptx,prc,prs,PRT,ps,psd,psp,pub,qpw,qt,ra,ram,RLE,rm,rmf,rmvb,rmx,rnd,rp,rpm,RPT,rt,rtf,s3m,sam,sb,scm,sdc,sdd,sdw,SEP,SNP,spl,srs,stc,sti,stw,svg,svr,SVW,swa,swf,swv,sxc,SXC,sxd,sxg,sxi,SXM,SXP,sxw,tga,tgz,tif,tiff,tmb,tsp,txt,vac,VCF,VDA,viv,vivo,vob,vox,vsd,VST,wav,wax,wb1,wb2,wb3,wbmp,wdb,wdf,wk,wk1,wk2,wk3,wk4,wk5,wki,wks,wku,wm,wma,wmf,wmv,wmx,wmz,wp5,wp6,wp7,wpd,wpf,wpl,wps,wri,wrk,wrl,ws,wvx,wpp,XBM,xdm,XLC,xls,xlsm,xlsx,XLT,XLW,xml,xpm,xyp,sib,zip,';        $upload->addValidator('Extension', false, array('extension' => $allowed_extensions, 'messages' => array(Zend_Validate_File_Extension::FALSE_EXTENSION => 'Invalid extension for file %value%')));        //$upload->addValidator('NotExists', false, array('destination' => $dest_dir, 'messages' => array(Zend_Validate_File_NotExists::DOES_EXIST => 'The file %value% already exist')));                // upload the file to the server        $files = $upload->getFileInfo();        foreach ($files as $file => $info) {            if($upload->isUploaded($info['name']) && $upload->isValid($info['name'])) {                $upload->receive();                $save_post['post_image'] = $info['name'];            }        }                                if($this->dbMapper->saveRecord($save_post, 'blogposts', 'post_id')) {            $this->_redirect('/blogadmin/');        } else {            throw new Exception('Failed to save post');        }    }        public function publishAction() {        $publish_post['post_id']   = $this->req->getParam('post');        $publish_post['published'] = 'Y';                if($this->dbMapper->saveRecord($publish_post, 'blogposts', 'post_id')) {            $this->_redirect('/blogadmin/');        } else {            throw new Exception('Failed to publish post');        }    }        public function hideAction() {        $hide_post['post_id']   = $this->req->getParam('post');        $hide_post['published'] = 'N';                if($this->dbMapper->saveRecord($hide_post, 'blogposts', 'post_id')) {            $this->_redirect('/blogadmin/');        } else {            throw new Exception('Failed to hide post');        }    }        public function deletepostAction() {        $post_id = $this->req->getParam('post');        if($this->dbMapper->deleteRecord('blogposts', 'post_id', $post_id)) {            $this->_redirect('/blogadmin/');        } else {            throw new Exception('Failed to delete post, please go back and try again.');        }    }        public function commentsAction() {        $post_id = $this->req->getParam('post');                $post = $this->dbMapper->getBlogPost($post_id);        $this->view->post = $post;                // get the comments for this blog post        $comments = $this->dbMapper->getAllPostComments($post_id);                $this->view->comments = $comments;                $this->view->css[] = '/css/blog.css';        $this->view->contentView = '/blogadmin/comments.phtml';        $this->renderView('admin.phtml');    }        public function approveAction() {        $approve['comment_id'] = $this->req->getParam('comment');        $approve['approved']   = 'Y';                if($this->dbMapper->saveRecord($approve, 'blogcomments', 'comment_id')) {            $redir = $_SERVER['HTTP_REFERER'];            $this->_redirect($redir);        } else {            throw new Exception('Failed to approve comment');        }    }        public function rejectAction() {        $reject['comment_id'] = $this->req->getParam('comment');        $reject['approved']   = 'N';                if($this->dbMapper->saveRecord($reject, 'blogcomments', 'comment_id')) {            $redir = $_SERVER['HTTP_REFERER'];            $this->_redirect($redir);        } else {            throw new Exception('Failed to approve comment');        }    }        public function deleteAction() {        $comment_id = $this->req->getParam('comment');                if($this->dbMapper->deleteRecord('blogcomments', 'comment_id', $comment_id)) {            $redir = $_SERVER['HTTP_REFERER'];            $this->_redirect($redir);        } else {            throw new Exception('Failed to delete post, please go back and try again.');        }    }        }